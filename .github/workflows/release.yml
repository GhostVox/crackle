# .github/workflows/release.yml
name: Release

on:
  push:
    tags: ["v*"] # Only build full releases on version tags

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            name: crackle-windows-x64.exe

          - target: i686-pc-windows-gnu
            os: windows-latest
            name: crackle-windows-x86.exe

          # Linux builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: crackle-linux-x64

          # macOS builds
          - target: x86_64-apple-darwin
            os: macos-13 # Intel Mac
            name: crackle-macos-x64

          - target: aarch64-apple-darwin
            os: macos-latest # Apple Silicon
            name: crackle-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Configure Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # Install mingw-w64 for GNU targets
          choco install mingw

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev pkg-config

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/crackle ${{ matrix.name }}

      - name: Rename binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/crackle.exe ${{ matrix.name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display structure
        run: ls -la dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
